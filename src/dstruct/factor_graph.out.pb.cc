// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factor_graph.out.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "factor_graph.out.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace deepdive {

namespace {

const ::google::protobuf::Descriptor* WeightInferenceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeightInferenceResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* VariableInferenceResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VariableInferenceResult_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_factor_5fgraph_2eout_2eproto() {
  protobuf_AddDesc_factor_5fgraph_2eout_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "factor_graph.out.proto");
  GOOGLE_CHECK(file != NULL);
  WeightInferenceResult_descriptor_ = file->message_type(0);
  static const int WeightInferenceResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightInferenceResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightInferenceResult, value_),
  };
  WeightInferenceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeightInferenceResult_descriptor_,
      WeightInferenceResult::default_instance_,
      WeightInferenceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightInferenceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeightInferenceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeightInferenceResult));
  VariableInferenceResult_descriptor_ = file->message_type(1);
  static const int VariableInferenceResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableInferenceResult, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableInferenceResult, category_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableInferenceResult, expectation_),
  };
  VariableInferenceResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VariableInferenceResult_descriptor_,
      VariableInferenceResult::default_instance_,
      VariableInferenceResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableInferenceResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VariableInferenceResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VariableInferenceResult));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_factor_5fgraph_2eout_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeightInferenceResult_descriptor_, &WeightInferenceResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VariableInferenceResult_descriptor_, &VariableInferenceResult::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_factor_5fgraph_2eout_2eproto() {
  delete WeightInferenceResult::default_instance_;
  delete WeightInferenceResult_reflection_;
  delete VariableInferenceResult::default_instance_;
  delete VariableInferenceResult_reflection_;
}

void protobuf_AddDesc_factor_5fgraph_2eout_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026factor_graph.out.proto\022\010deepdive\"2\n\025We"
    "ightInferenceResult\022\n\n\002id\030\001 \002(\004\022\r\n\005value"
    "\030\002 \002(\001\"L\n\027VariableInferenceResult\022\n\n\002id\030"
    "\001 \002(\004\022\020\n\010category\030\002 \001(\004\022\023\n\013expectation\030\003"
    " \002(\001B3\n\032org.deepdive.serializationB\025Infe"
    "renceResultProtos", 217);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "factor_graph.out.proto", &protobuf_RegisterTypes);
  WeightInferenceResult::default_instance_ = new WeightInferenceResult();
  VariableInferenceResult::default_instance_ = new VariableInferenceResult();
  WeightInferenceResult::default_instance_->InitAsDefaultInstance();
  VariableInferenceResult::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_factor_5fgraph_2eout_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_factor_5fgraph_2eout_2eproto {
  StaticDescriptorInitializer_factor_5fgraph_2eout_2eproto() {
    protobuf_AddDesc_factor_5fgraph_2eout_2eproto();
  }
} static_descriptor_initializer_factor_5fgraph_2eout_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WeightInferenceResult::kIdFieldNumber;
const int WeightInferenceResult::kValueFieldNumber;
#endif  // !_MSC_VER

WeightInferenceResult::WeightInferenceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeightInferenceResult::InitAsDefaultInstance() {
}

WeightInferenceResult::WeightInferenceResult(const WeightInferenceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeightInferenceResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeightInferenceResult::~WeightInferenceResult() {
  SharedDtor();
}

void WeightInferenceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeightInferenceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeightInferenceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeightInferenceResult_descriptor_;
}

const WeightInferenceResult& WeightInferenceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eout_2eproto();
  return *default_instance_;
}

WeightInferenceResult* WeightInferenceResult::default_instance_ = NULL;

WeightInferenceResult* WeightInferenceResult::New() const {
  return new WeightInferenceResult;
}

void WeightInferenceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeightInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeightInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeightInferenceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeightInferenceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeightInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeightInferenceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeightInferenceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeightInferenceResult::MergeFrom(const WeightInferenceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeightInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeightInferenceResult::CopyFrom(const WeightInferenceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeightInferenceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WeightInferenceResult::Swap(WeightInferenceResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeightInferenceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeightInferenceResult_descriptor_;
  metadata.reflection = WeightInferenceResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VariableInferenceResult::kIdFieldNumber;
const int VariableInferenceResult::kCategoryFieldNumber;
const int VariableInferenceResult::kExpectationFieldNumber;
#endif  // !_MSC_VER

VariableInferenceResult::VariableInferenceResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VariableInferenceResult::InitAsDefaultInstance() {
}

VariableInferenceResult::VariableInferenceResult(const VariableInferenceResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VariableInferenceResult::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  category_ = GOOGLE_ULONGLONG(0);
  expectation_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VariableInferenceResult::~VariableInferenceResult() {
  SharedDtor();
}

void VariableInferenceResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VariableInferenceResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VariableInferenceResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VariableInferenceResult_descriptor_;
}

const VariableInferenceResult& VariableInferenceResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eout_2eproto();
  return *default_instance_;
}

VariableInferenceResult* VariableInferenceResult::default_instance_ = NULL;

VariableInferenceResult* VariableInferenceResult::New() const {
  return new VariableInferenceResult;
}

void VariableInferenceResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    category_ = GOOGLE_ULONGLONG(0);
    expectation_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VariableInferenceResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_category;
        break;
      }

      // optional uint64 category = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_category:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &category_)));
          set_has_category();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_expectation;
        break;
      }

      // required double expectation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_expectation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &expectation_)));
          set_has_expectation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VariableInferenceResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional uint64 category = 2;
  if (has_category()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->category(), output);
  }

  // required double expectation = 3;
  if (has_expectation()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->expectation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VariableInferenceResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional uint64 category = 2;
  if (has_category()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->category(), target);
  }

  // required double expectation = 3;
  if (has_expectation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->expectation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VariableInferenceResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 category = 2;
    if (has_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->category());
    }

    // required double expectation = 3;
    if (has_expectation()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VariableInferenceResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VariableInferenceResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VariableInferenceResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VariableInferenceResult::MergeFrom(const VariableInferenceResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_category()) {
      set_category(from.category());
    }
    if (from.has_expectation()) {
      set_expectation(from.expectation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VariableInferenceResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VariableInferenceResult::CopyFrom(const VariableInferenceResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VariableInferenceResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void VariableInferenceResult::Swap(VariableInferenceResult* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(category_, other->category_);
    std::swap(expectation_, other->expectation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VariableInferenceResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VariableInferenceResult_descriptor_;
  metadata.reflection = VariableInferenceResult_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepdive

// @@protoc_insertion_point(global_scope)
