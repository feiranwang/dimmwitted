// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factor_graph.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "factor_graph.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace deepdive {

namespace {

const ::google::protobuf::Descriptor* Weight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Weight_reflection_ = NULL;
const ::google::protobuf::Descriptor* Variable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Variable_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Variable_VariableDataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Factor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Factor_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Factor_FactorFunctionType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GraphEdge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GraphEdge_reflection_ = NULL;
const ::google::protobuf::Descriptor* FactorGraph_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FactorGraph_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_factor_5fgraph_2eproto() {
  protobuf_AddDesc_factor_5fgraph_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "factor_graph.proto");
  GOOGLE_CHECK(file != NULL);
  Weight_descriptor_ = file->message_type(0);
  static const int Weight_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, initialvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, isfixed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, description_),
  };
  Weight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Weight_descriptor_,
      Weight::default_instance_,
      Weight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Weight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Weight));
  Variable_descriptor_ = file->message_type(1);
  static const int Variable_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, initialvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, isevidence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, cardinality_),
  };
  Variable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Variable_descriptor_,
      Variable::default_instance_,
      Variable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Variable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Variable));
  Variable_VariableDataType_descriptor_ = Variable_descriptor_->enum_type(0);
  Factor_descriptor_ = file->message_type(2);
  static const int Factor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, weightid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, factorfunction_),
  };
  Factor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Factor_descriptor_,
      Factor::default_instance_,
      Factor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Factor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Factor));
  Factor_FactorFunctionType_descriptor_ = Factor_descriptor_->enum_type(0);
  GraphEdge_descriptor_ = file->message_type(3);
  static const int GraphEdge_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, variableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, factorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, ispositive_),
  };
  GraphEdge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GraphEdge_descriptor_,
      GraphEdge::default_instance_,
      GraphEdge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GraphEdge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GraphEdge));
  FactorGraph_descriptor_ = file->message_type(4);
  static const int FactorGraph_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, variable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, factor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, edge_),
  };
  FactorGraph_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FactorGraph_descriptor_,
      FactorGraph::default_instance_,
      FactorGraph_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FactorGraph, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FactorGraph));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_factor_5fgraph_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Weight_descriptor_, &Weight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Variable_descriptor_, &Variable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Factor_descriptor_, &Factor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GraphEdge_descriptor_, &GraphEdge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FactorGraph_descriptor_, &FactorGraph::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_factor_5fgraph_2eproto() {
  delete Weight::default_instance_;
  delete Weight_reflection_;
  delete Variable::default_instance_;
  delete Variable_reflection_;
  delete Factor::default_instance_;
  delete Factor_reflection_;
  delete GraphEdge::default_instance_;
  delete GraphEdge_reflection_;
  delete FactorGraph::default_instance_;
  delete FactorGraph_reflection_;
}

void protobuf_AddDesc_factor_5fgraph_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022factor_graph.proto\022\010deepdive\"S\n\006Weight"
    "\022\n\n\002id\030\001 \002(\004\022\027\n\014initialValue\030\002 \001(\001:\0010\022\017\n"
    "\007isFixed\030\003 \002(\010\022\023\n\013description\030\004 \001(\t\"\310\001\n\010"
    "Variable\022\n\n\002id\030\001 \002(\004\022\024\n\014initialValue\030\002 \001"
    "(\001\0225\n\010dataType\030\003 \002(\0162#.deepdive.Variable"
    ".VariableDataType\022\022\n\nisEvidence\030\004 \001(\010\022\023\n"
    "\013cardinality\030\005 \001(\004\":\n\020VariableDataType\022\013"
    "\n\007BOOLEAN\020\000\022\017\n\013MULTINOMIAL\020\001\022\010\n\004REAL\020\002\"\254"
    "\001\n\006Factor\022\n\n\002id\030\001 \002(\004\022\020\n\010weightId\030\002 \002(\004\022"
    ";\n\016factorFunction\030\003 \002(\0162#.deepdive.Facto"
    "r.FactorFunctionType\"G\n\022FactorFunctionTy"
    "pe\022\t\n\005IMPLY\020\000\022\006\n\002OR\020\001\022\007\n\003AND\020\002\022\t\n\005EQUAL\020"
    "\003\022\n\n\006ISTRUE\020\004\"]\n\tGraphEdge\022\022\n\nvariableId"
    "\030\001 \002(\004\022\020\n\010factorId\030\002 \002(\004\022\020\n\010position\030\003 \002"
    "(\004\022\030\n\nisPositive\030\004 \001(\010:\004true\"\232\001\n\013FactorG"
    "raph\022 \n\006weight\030\001 \003(\0132\020.deepdive.Weight\022$"
    "\n\010variable\030\002 \003(\0132\022.deepdive.Variable\022 \n\006"
    "factor\030\003 \003(\0132\020.deepdive.Factor\022!\n\004edge\030\004"
    " \003(\0132\023.deepdive.GraphEdgeB/\n\032org.deepdiv"
    "e.serializationB\021FactorGraphProtos", 794);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "factor_graph.proto", &protobuf_RegisterTypes);
  Weight::default_instance_ = new Weight();
  Variable::default_instance_ = new Variable();
  Factor::default_instance_ = new Factor();
  GraphEdge::default_instance_ = new GraphEdge();
  FactorGraph::default_instance_ = new FactorGraph();
  Weight::default_instance_->InitAsDefaultInstance();
  Variable::default_instance_->InitAsDefaultInstance();
  Factor::default_instance_->InitAsDefaultInstance();
  GraphEdge::default_instance_->InitAsDefaultInstance();
  FactorGraph::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_factor_5fgraph_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_factor_5fgraph_2eproto {
  StaticDescriptorInitializer_factor_5fgraph_2eproto() {
    protobuf_AddDesc_factor_5fgraph_2eproto();
  }
} static_descriptor_initializer_factor_5fgraph_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Weight::kIdFieldNumber;
const int Weight::kInitialValueFieldNumber;
const int Weight::kIsFixedFieldNumber;
const int Weight::kDescriptionFieldNumber;
#endif  // !_MSC_VER

Weight::Weight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Weight::InitAsDefaultInstance() {
}

Weight::Weight(const Weight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Weight::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  initialvalue_ = 0;
  isfixed_ = false;
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Weight::~Weight() {
  SharedDtor();
}

void Weight::SharedDtor() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (this != default_instance_) {
  }
}

void Weight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Weight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Weight_descriptor_;
}

const Weight& Weight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eproto();
  return *default_instance_;
}

Weight* Weight::default_instance_ = NULL;

Weight* Weight::New() const {
  return new Weight;
}

void Weight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    initialvalue_ = 0;
    isfixed_ = false;
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Weight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_initialValue;
        break;
      }

      // optional double initialValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_initialValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initialvalue_)));
          set_has_initialvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isFixed;
        break;
      }

      // required bool isFixed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isFixed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isfixed_)));
          set_has_isfixed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_description;
        break;
      }

      // optional string description = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Weight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional double initialValue = 2 [default = 0];
  if (has_initialvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->initialvalue(), output);
  }

  // required bool isFixed = 3;
  if (has_isfixed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isfixed(), output);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Weight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional double initialValue = 2 [default = 0];
  if (has_initialvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->initialvalue(), target);
  }

  // required bool isFixed = 3;
  if (has_isfixed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isfixed(), target);
  }

  // optional string description = 4;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Weight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional double initialValue = 2 [default = 0];
    if (has_initialvalue()) {
      total_size += 1 + 8;
    }

    // required bool isFixed = 3;
    if (has_isfixed()) {
      total_size += 1 + 1;
    }

    // optional string description = 4;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Weight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Weight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Weight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Weight::MergeFrom(const Weight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_initialvalue()) {
      set_initialvalue(from.initialvalue());
    }
    if (from.has_isfixed()) {
      set_isfixed(from.isfixed());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Weight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Weight::CopyFrom(const Weight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Weight::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Weight::Swap(Weight* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(initialvalue_, other->initialvalue_);
    std::swap(isfixed_, other->isfixed_);
    std::swap(description_, other->description_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Weight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Weight_descriptor_;
  metadata.reflection = Weight_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Variable_VariableDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variable_VariableDataType_descriptor_;
}
bool Variable_VariableDataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Variable_VariableDataType Variable::BOOLEAN;
const Variable_VariableDataType Variable::MULTINOMIAL;
const Variable_VariableDataType Variable::REAL;
const Variable_VariableDataType Variable::VariableDataType_MIN;
const Variable_VariableDataType Variable::VariableDataType_MAX;
const int Variable::VariableDataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Variable::kIdFieldNumber;
const int Variable::kInitialValueFieldNumber;
const int Variable::kDataTypeFieldNumber;
const int Variable::kIsEvidenceFieldNumber;
const int Variable::kCardinalityFieldNumber;
#endif  // !_MSC_VER

Variable::Variable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Variable::InitAsDefaultInstance() {
}

Variable::Variable(const Variable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Variable::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  initialvalue_ = 0;
  datatype_ = 0;
  isevidence_ = false;
  cardinality_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Variable::~Variable() {
  SharedDtor();
}

void Variable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Variable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Variable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Variable_descriptor_;
}

const Variable& Variable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eproto();
  return *default_instance_;
}

Variable* Variable::default_instance_ = NULL;

Variable* Variable::New() const {
  return new Variable;
}

void Variable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    initialvalue_ = 0;
    datatype_ = 0;
    isevidence_ = false;
    cardinality_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Variable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_initialValue;
        break;
      }

      // optional double initialValue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_initialValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &initialvalue_)));
          set_has_initialvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataType;
        break;
      }

      // required .deepdive.Variable.VariableDataType dataType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::deepdive::Variable_VariableDataType_IsValid(value)) {
            set_datatype(static_cast< ::deepdive::Variable_VariableDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isEvidence;
        break;
      }

      // optional bool isEvidence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEvidence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isevidence_)));
          set_has_isevidence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cardinality;
        break;
      }

      // optional uint64 cardinality = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cardinality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &cardinality_)));
          set_has_cardinality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Variable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // optional double initialValue = 2;
  if (has_initialvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->initialvalue(), output);
  }

  // required .deepdive.Variable.VariableDataType dataType = 3;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->datatype(), output);
  }

  // optional bool isEvidence = 4;
  if (has_isevidence()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isevidence(), output);
  }

  // optional uint64 cardinality = 5;
  if (has_cardinality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->cardinality(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Variable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // optional double initialValue = 2;
  if (has_initialvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->initialvalue(), target);
  }

  // required .deepdive.Variable.VariableDataType dataType = 3;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->datatype(), target);
  }

  // optional bool isEvidence = 4;
  if (has_isevidence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isevidence(), target);
  }

  // optional uint64 cardinality = 5;
  if (has_cardinality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->cardinality(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Variable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional double initialValue = 2;
    if (has_initialvalue()) {
      total_size += 1 + 8;
    }

    // required .deepdive.Variable.VariableDataType dataType = 3;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

    // optional bool isEvidence = 4;
    if (has_isevidence()) {
      total_size += 1 + 1;
    }

    // optional uint64 cardinality = 5;
    if (has_cardinality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->cardinality());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Variable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Variable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Variable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Variable::MergeFrom(const Variable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_initialvalue()) {
      set_initialvalue(from.initialvalue());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_isevidence()) {
      set_isevidence(from.isevidence());
    }
    if (from.has_cardinality()) {
      set_cardinality(from.cardinality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Variable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Variable::CopyFrom(const Variable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Variable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void Variable::Swap(Variable* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(initialvalue_, other->initialvalue_);
    std::swap(datatype_, other->datatype_);
    std::swap(isevidence_, other->isevidence_);
    std::swap(cardinality_, other->cardinality_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Variable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Variable_descriptor_;
  metadata.reflection = Variable_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Factor_FactorFunctionType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Factor_FactorFunctionType_descriptor_;
}
bool Factor_FactorFunctionType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Factor_FactorFunctionType Factor::IMPLY;
const Factor_FactorFunctionType Factor::OR;
const Factor_FactorFunctionType Factor::AND;
const Factor_FactorFunctionType Factor::EQUAL;
const Factor_FactorFunctionType Factor::ISTRUE;
const Factor_FactorFunctionType Factor::FactorFunctionType_MIN;
const Factor_FactorFunctionType Factor::FactorFunctionType_MAX;
const int Factor::FactorFunctionType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Factor::kIdFieldNumber;
const int Factor::kWeightIdFieldNumber;
const int Factor::kFactorFunctionFieldNumber;
#endif  // !_MSC_VER

Factor::Factor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Factor::InitAsDefaultInstance() {
}

Factor::Factor(const Factor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Factor::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  weightid_ = GOOGLE_ULONGLONG(0);
  factorfunction_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Factor::~Factor() {
  SharedDtor();
}

void Factor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Factor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Factor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Factor_descriptor_;
}

const Factor& Factor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eproto();
  return *default_instance_;
}

Factor* Factor::default_instance_ = NULL;

Factor* Factor::New() const {
  return new Factor;
}

void Factor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    weightid_ = GOOGLE_ULONGLONG(0);
    factorfunction_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Factor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_weightId;
        break;
      }

      // required uint64 weightId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weightId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &weightid_)));
          set_has_weightid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_factorFunction;
        break;
      }

      // required .deepdive.Factor.FactorFunctionType factorFunction = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factorFunction:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::deepdive::Factor_FactorFunctionType_IsValid(value)) {
            set_factorfunction(static_cast< ::deepdive::Factor_FactorFunctionType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Factor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required uint64 weightId = 2;
  if (has_weightid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->weightid(), output);
  }

  // required .deepdive.Factor.FactorFunctionType factorFunction = 3;
  if (has_factorfunction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->factorfunction(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Factor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->id(), target);
  }

  // required uint64 weightId = 2;
  if (has_weightid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->weightid(), target);
  }

  // required .deepdive.Factor.FactorFunctionType factorFunction = 3;
  if (has_factorfunction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->factorfunction(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Factor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required uint64 weightId = 2;
    if (has_weightid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->weightid());
    }

    // required .deepdive.Factor.FactorFunctionType factorFunction = 3;
    if (has_factorfunction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->factorfunction());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Factor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Factor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Factor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Factor::MergeFrom(const Factor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_weightid()) {
      set_weightid(from.weightid());
    }
    if (from.has_factorfunction()) {
      set_factorfunction(from.factorfunction());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Factor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Factor::CopyFrom(const Factor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Factor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Factor::Swap(Factor* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(weightid_, other->weightid_);
    std::swap(factorfunction_, other->factorfunction_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Factor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Factor_descriptor_;
  metadata.reflection = Factor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GraphEdge::kVariableIdFieldNumber;
const int GraphEdge::kFactorIdFieldNumber;
const int GraphEdge::kPositionFieldNumber;
const int GraphEdge::kIsPositiveFieldNumber;
#endif  // !_MSC_VER

GraphEdge::GraphEdge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GraphEdge::InitAsDefaultInstance() {
}

GraphEdge::GraphEdge(const GraphEdge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GraphEdge::SharedCtor() {
  _cached_size_ = 0;
  variableid_ = GOOGLE_ULONGLONG(0);
  factorid_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  ispositive_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GraphEdge::~GraphEdge() {
  SharedDtor();
}

void GraphEdge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GraphEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GraphEdge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GraphEdge_descriptor_;
}

const GraphEdge& GraphEdge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eproto();
  return *default_instance_;
}

GraphEdge* GraphEdge::default_instance_ = NULL;

GraphEdge* GraphEdge::New() const {
  return new GraphEdge;
}

void GraphEdge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    variableid_ = GOOGLE_ULONGLONG(0);
    factorid_ = GOOGLE_ULONGLONG(0);
    position_ = GOOGLE_ULONGLONG(0);
    ispositive_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GraphEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 variableId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &variableid_)));
          set_has_variableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_factorId;
        break;
      }

      // required uint64 factorId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_factorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &factorid_)));
          set_has_factorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required uint64 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isPositive;
        break;
      }

      // optional bool isPositive = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPositive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispositive_)));
          set_has_ispositive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GraphEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 variableId = 1;
  if (has_variableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->variableid(), output);
  }

  // required uint64 factorId = 2;
  if (has_factorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->factorid(), output);
  }

  // required uint64 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->position(), output);
  }

  // optional bool isPositive = 4 [default = true];
  if (has_ispositive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ispositive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GraphEdge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 variableId = 1;
  if (has_variableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->variableid(), target);
  }

  // required uint64 factorId = 2;
  if (has_factorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->factorid(), target);
  }

  // required uint64 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->position(), target);
  }

  // optional bool isPositive = 4 [default = true];
  if (has_ispositive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ispositive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GraphEdge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 variableId = 1;
    if (has_variableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->variableid());
    }

    // required uint64 factorId = 2;
    if (has_factorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->factorid());
    }

    // required uint64 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

    // optional bool isPositive = 4 [default = true];
    if (has_ispositive()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GraphEdge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GraphEdge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GraphEdge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GraphEdge::MergeFrom(const GraphEdge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_variableid()) {
      set_variableid(from.variableid());
    }
    if (from.has_factorid()) {
      set_factorid(from.factorid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_ispositive()) {
      set_ispositive(from.ispositive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GraphEdge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphEdge::CopyFrom(const GraphEdge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphEdge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GraphEdge::Swap(GraphEdge* other) {
  if (other != this) {
    std::swap(variableid_, other->variableid_);
    std::swap(factorid_, other->factorid_);
    std::swap(position_, other->position_);
    std::swap(ispositive_, other->ispositive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GraphEdge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GraphEdge_descriptor_;
  metadata.reflection = GraphEdge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FactorGraph::kWeightFieldNumber;
const int FactorGraph::kVariableFieldNumber;
const int FactorGraph::kFactorFieldNumber;
const int FactorGraph::kEdgeFieldNumber;
#endif  // !_MSC_VER

FactorGraph::FactorGraph()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FactorGraph::InitAsDefaultInstance() {
}

FactorGraph::FactorGraph(const FactorGraph& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FactorGraph::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FactorGraph::~FactorGraph() {
  SharedDtor();
}

void FactorGraph::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FactorGraph::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FactorGraph::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FactorGraph_descriptor_;
}

const FactorGraph& FactorGraph::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_factor_5fgraph_2eproto();
  return *default_instance_;
}

FactorGraph* FactorGraph::default_instance_ = NULL;

FactorGraph* FactorGraph::New() const {
  return new FactorGraph;
}

void FactorGraph::Clear() {
  weight_.Clear();
  variable_.Clear();
  factor_.Clear();
  edge_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FactorGraph::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .deepdive.Weight weight = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_weight()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_weight;
        if (input->ExpectTag(18)) goto parse_variable;
        break;
      }

      // repeated .deepdive.Variable variable = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_variable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_variable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_variable;
        if (input->ExpectTag(26)) goto parse_factor;
        break;
      }

      // repeated .deepdive.Factor factor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_factor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_factor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_factor;
        if (input->ExpectTag(34)) goto parse_edge;
        break;
      }

      // repeated .deepdive.GraphEdge edge = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_edge:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_edge()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_edge;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FactorGraph::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .deepdive.Weight weight = 1;
  for (int i = 0; i < this->weight_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->weight(i), output);
  }

  // repeated .deepdive.Variable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->variable(i), output);
  }

  // repeated .deepdive.Factor factor = 3;
  for (int i = 0; i < this->factor_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->factor(i), output);
  }

  // repeated .deepdive.GraphEdge edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->edge(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FactorGraph::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .deepdive.Weight weight = 1;
  for (int i = 0; i < this->weight_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->weight(i), target);
  }

  // repeated .deepdive.Variable variable = 2;
  for (int i = 0; i < this->variable_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->variable(i), target);
  }

  // repeated .deepdive.Factor factor = 3;
  for (int i = 0; i < this->factor_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->factor(i), target);
  }

  // repeated .deepdive.GraphEdge edge = 4;
  for (int i = 0; i < this->edge_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->edge(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FactorGraph::ByteSize() const {
  int total_size = 0;

  // repeated .deepdive.Weight weight = 1;
  total_size += 1 * this->weight_size();
  for (int i = 0; i < this->weight_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->weight(i));
  }

  // repeated .deepdive.Variable variable = 2;
  total_size += 1 * this->variable_size();
  for (int i = 0; i < this->variable_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->variable(i));
  }

  // repeated .deepdive.Factor factor = 3;
  total_size += 1 * this->factor_size();
  for (int i = 0; i < this->factor_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->factor(i));
  }

  // repeated .deepdive.GraphEdge edge = 4;
  total_size += 1 * this->edge_size();
  for (int i = 0; i < this->edge_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->edge(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FactorGraph::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FactorGraph* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FactorGraph*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FactorGraph::MergeFrom(const FactorGraph& from) {
  GOOGLE_CHECK_NE(&from, this);
  weight_.MergeFrom(from.weight_);
  variable_.MergeFrom(from.variable_);
  factor_.MergeFrom(from.factor_);
  edge_.MergeFrom(from.edge_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FactorGraph::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FactorGraph::CopyFrom(const FactorGraph& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FactorGraph::IsInitialized() const {

  for (int i = 0; i < weight_size(); i++) {
    if (!this->weight(i).IsInitialized()) return false;
  }
  for (int i = 0; i < variable_size(); i++) {
    if (!this->variable(i).IsInitialized()) return false;
  }
  for (int i = 0; i < factor_size(); i++) {
    if (!this->factor(i).IsInitialized()) return false;
  }
  for (int i = 0; i < edge_size(); i++) {
    if (!this->edge(i).IsInitialized()) return false;
  }
  return true;
}

void FactorGraph::Swap(FactorGraph* other) {
  if (other != this) {
    weight_.Swap(&other->weight_);
    variable_.Swap(&other->variable_);
    factor_.Swap(&other->factor_);
    edge_.Swap(&other->edge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FactorGraph::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FactorGraph_descriptor_;
  metadata.reflection = FactorGraph_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepdive

// @@protoc_insertion_point(global_scope)
