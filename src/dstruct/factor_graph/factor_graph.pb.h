// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: factor_graph.proto

#ifndef PROTOBUF_factor_5fgraph_2eproto__INCLUDED
#define PROTOBUF_factor_5fgraph_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace deepdive {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_factor_5fgraph_2eproto();
void protobuf_AssignDesc_factor_5fgraph_2eproto();
void protobuf_ShutdownFile_factor_5fgraph_2eproto();

class Weight;
class Variable;
class Factor;
class GraphEdge;
class FactorGraph;
class WeightInferenceResult;
class VariableInferenceResult;

enum Variable_VariableDataType {
  Variable_VariableDataType_BOOLEAN = 0,
  Variable_VariableDataType_MULTINOMIAL = 1,
  Variable_VariableDataType_REAL = 2
};
bool Variable_VariableDataType_IsValid(int value);
const Variable_VariableDataType Variable_VariableDataType_VariableDataType_MIN = Variable_VariableDataType_BOOLEAN;
const Variable_VariableDataType Variable_VariableDataType_VariableDataType_MAX = Variable_VariableDataType_REAL;
const int Variable_VariableDataType_VariableDataType_ARRAYSIZE = Variable_VariableDataType_VariableDataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Variable_VariableDataType_descriptor();
inline const ::std::string& Variable_VariableDataType_Name(Variable_VariableDataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Variable_VariableDataType_descriptor(), value);
}
inline bool Variable_VariableDataType_Parse(
    const ::std::string& name, Variable_VariableDataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Variable_VariableDataType>(
    Variable_VariableDataType_descriptor(), name, value);
}
enum Factor_FactorFunctionType {
  Factor_FactorFunctionType_IMPLY = 0,
  Factor_FactorFunctionType_OR = 1,
  Factor_FactorFunctionType_AND = 2,
  Factor_FactorFunctionType_EQUAL = 3,
  Factor_FactorFunctionType_ISTRUE = 4
};
bool Factor_FactorFunctionType_IsValid(int value);
const Factor_FactorFunctionType Factor_FactorFunctionType_FactorFunctionType_MIN = Factor_FactorFunctionType_IMPLY;
const Factor_FactorFunctionType Factor_FactorFunctionType_FactorFunctionType_MAX = Factor_FactorFunctionType_ISTRUE;
const int Factor_FactorFunctionType_FactorFunctionType_ARRAYSIZE = Factor_FactorFunctionType_FactorFunctionType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Factor_FactorFunctionType_descriptor();
inline const ::std::string& Factor_FactorFunctionType_Name(Factor_FactorFunctionType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Factor_FactorFunctionType_descriptor(), value);
}
inline bool Factor_FactorFunctionType_Parse(
    const ::std::string& name, Factor_FactorFunctionType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Factor_FactorFunctionType>(
    Factor_FactorFunctionType_descriptor(), name, value);
}
// ===================================================================

class Weight : public ::google::protobuf::Message {
 public:
  Weight();
  virtual ~Weight();

  Weight(const Weight& from);

  inline Weight& operator=(const Weight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Weight& default_instance();

  void Swap(Weight* other);

  // implements Message ----------------------------------------------

  Weight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Weight& from);
  void MergeFrom(const Weight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional double initialValue = 2 [default = 0];
  inline bool has_initialvalue() const;
  inline void clear_initialvalue();
  static const int kInitialValueFieldNumber = 2;
  inline double initialvalue() const;
  inline void set_initialvalue(double value);

  // required bool isFixed = 3;
  inline bool has_isfixed() const;
  inline void clear_isfixed();
  static const int kIsFixedFieldNumber = 3;
  inline bool isfixed() const;
  inline void set_isfixed(bool value);

  // optional string description = 4;
  inline bool has_description() const;
  inline void clear_description();
  static const int kDescriptionFieldNumber = 4;
  inline const ::std::string& description() const;
  inline void set_description(const ::std::string& value);
  inline void set_description(const char* value);
  inline void set_description(const char* value, size_t size);
  inline ::std::string* mutable_description();
  inline ::std::string* release_description();
  inline void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:deepdive.Weight)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_initialvalue();
  inline void clear_has_initialvalue();
  inline void set_has_isfixed();
  inline void clear_has_isfixed();
  inline void set_has_description();
  inline void clear_has_description();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  double initialvalue_;
  ::std::string* description_;
  bool isfixed_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static Weight* default_instance_;
};
// -------------------------------------------------------------------

class Variable : public ::google::protobuf::Message {
 public:
  Variable();
  virtual ~Variable();

  Variable(const Variable& from);

  inline Variable& operator=(const Variable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Variable& default_instance();

  void Swap(Variable* other);

  // implements Message ----------------------------------------------

  Variable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Variable& from);
  void MergeFrom(const Variable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Variable_VariableDataType VariableDataType;
  static const VariableDataType BOOLEAN = Variable_VariableDataType_BOOLEAN;
  static const VariableDataType MULTINOMIAL = Variable_VariableDataType_MULTINOMIAL;
  static const VariableDataType REAL = Variable_VariableDataType_REAL;
  static inline bool VariableDataType_IsValid(int value) {
    return Variable_VariableDataType_IsValid(value);
  }
  static const VariableDataType VariableDataType_MIN =
    Variable_VariableDataType_VariableDataType_MIN;
  static const VariableDataType VariableDataType_MAX =
    Variable_VariableDataType_VariableDataType_MAX;
  static const int VariableDataType_ARRAYSIZE =
    Variable_VariableDataType_VariableDataType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  VariableDataType_descriptor() {
    return Variable_VariableDataType_descriptor();
  }
  static inline const ::std::string& VariableDataType_Name(VariableDataType value) {
    return Variable_VariableDataType_Name(value);
  }
  static inline bool VariableDataType_Parse(const ::std::string& name,
      VariableDataType* value) {
    return Variable_VariableDataType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional double initialValue = 2;
  inline bool has_initialvalue() const;
  inline void clear_initialvalue();
  static const int kInitialValueFieldNumber = 2;
  inline double initialvalue() const;
  inline void set_initialvalue(double value);

  // required .deepdive.Variable.VariableDataType dataType = 3;
  inline bool has_datatype() const;
  inline void clear_datatype();
  static const int kDataTypeFieldNumber = 3;
  inline ::deepdive::Variable_VariableDataType datatype() const;
  inline void set_datatype(::deepdive::Variable_VariableDataType value);

  // optional bool isEvidence = 4;
  inline bool has_isevidence() const;
  inline void clear_isevidence();
  static const int kIsEvidenceFieldNumber = 4;
  inline bool isevidence() const;
  inline void set_isevidence(bool value);

  // optional uint64 cardinality = 5;
  inline bool has_cardinality() const;
  inline void clear_cardinality();
  static const int kCardinalityFieldNumber = 5;
  inline ::google::protobuf::uint64 cardinality() const;
  inline void set_cardinality(::google::protobuf::uint64 value);

  // optional uint64 edgeCount = 6;
  inline bool has_edgecount() const;
  inline void clear_edgecount();
  static const int kEdgeCountFieldNumber = 6;
  inline ::google::protobuf::uint64 edgecount() const;
  inline void set_edgecount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:deepdive.Variable)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_initialvalue();
  inline void clear_has_initialvalue();
  inline void set_has_datatype();
  inline void clear_has_datatype();
  inline void set_has_isevidence();
  inline void clear_has_isevidence();
  inline void set_has_cardinality();
  inline void clear_has_cardinality();
  inline void set_has_edgecount();
  inline void clear_has_edgecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  double initialvalue_;
  int datatype_;
  bool isevidence_;
  ::google::protobuf::uint64 cardinality_;
  ::google::protobuf::uint64 edgecount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static Variable* default_instance_;
};
// -------------------------------------------------------------------

class Factor : public ::google::protobuf::Message {
 public:
  Factor();
  virtual ~Factor();

  Factor(const Factor& from);

  inline Factor& operator=(const Factor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Factor& default_instance();

  void Swap(Factor* other);

  // implements Message ----------------------------------------------

  Factor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Factor& from);
  void MergeFrom(const Factor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Factor_FactorFunctionType FactorFunctionType;
  static const FactorFunctionType IMPLY = Factor_FactorFunctionType_IMPLY;
  static const FactorFunctionType OR = Factor_FactorFunctionType_OR;
  static const FactorFunctionType AND = Factor_FactorFunctionType_AND;
  static const FactorFunctionType EQUAL = Factor_FactorFunctionType_EQUAL;
  static const FactorFunctionType ISTRUE = Factor_FactorFunctionType_ISTRUE;
  static inline bool FactorFunctionType_IsValid(int value) {
    return Factor_FactorFunctionType_IsValid(value);
  }
  static const FactorFunctionType FactorFunctionType_MIN =
    Factor_FactorFunctionType_FactorFunctionType_MIN;
  static const FactorFunctionType FactorFunctionType_MAX =
    Factor_FactorFunctionType_FactorFunctionType_MAX;
  static const int FactorFunctionType_ARRAYSIZE =
    Factor_FactorFunctionType_FactorFunctionType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  FactorFunctionType_descriptor() {
    return Factor_FactorFunctionType_descriptor();
  }
  static inline const ::std::string& FactorFunctionType_Name(FactorFunctionType value) {
    return Factor_FactorFunctionType_Name(value);
  }
  static inline bool FactorFunctionType_Parse(const ::std::string& name,
      FactorFunctionType* value) {
    return Factor_FactorFunctionType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required uint64 weightId = 2;
  inline bool has_weightid() const;
  inline void clear_weightid();
  static const int kWeightIdFieldNumber = 2;
  inline ::google::protobuf::uint64 weightid() const;
  inline void set_weightid(::google::protobuf::uint64 value);

  // required .deepdive.Factor.FactorFunctionType factorFunction = 3;
  inline bool has_factorfunction() const;
  inline void clear_factorfunction();
  static const int kFactorFunctionFieldNumber = 3;
  inline ::deepdive::Factor_FactorFunctionType factorfunction() const;
  inline void set_factorfunction(::deepdive::Factor_FactorFunctionType value);

  // optional uint64 edgeCount = 4;
  inline bool has_edgecount() const;
  inline void clear_edgecount();
  static const int kEdgeCountFieldNumber = 4;
  inline ::google::protobuf::uint64 edgecount() const;
  inline void set_edgecount(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:deepdive.Factor)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_weightid();
  inline void clear_has_weightid();
  inline void set_has_factorfunction();
  inline void clear_has_factorfunction();
  inline void set_has_edgecount();
  inline void clear_has_edgecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 weightid_;
  ::google::protobuf::uint64 edgecount_;
  int factorfunction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static Factor* default_instance_;
};
// -------------------------------------------------------------------

class GraphEdge : public ::google::protobuf::Message {
 public:
  GraphEdge();
  virtual ~GraphEdge();

  GraphEdge(const GraphEdge& from);

  inline GraphEdge& operator=(const GraphEdge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphEdge& default_instance();

  void Swap(GraphEdge* other);

  // implements Message ----------------------------------------------

  GraphEdge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GraphEdge& from);
  void MergeFrom(const GraphEdge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 variableId = 1;
  inline bool has_variableid() const;
  inline void clear_variableid();
  static const int kVariableIdFieldNumber = 1;
  inline ::google::protobuf::uint64 variableid() const;
  inline void set_variableid(::google::protobuf::uint64 value);

  // required uint64 factorId = 2;
  inline bool has_factorid() const;
  inline void clear_factorid();
  static const int kFactorIdFieldNumber = 2;
  inline ::google::protobuf::uint64 factorid() const;
  inline void set_factorid(::google::protobuf::uint64 value);

  // required uint64 position = 3;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 3;
  inline ::google::protobuf::uint64 position() const;
  inline void set_position(::google::protobuf::uint64 value);

  // optional bool isPositive = 4 [default = true];
  inline bool has_ispositive() const;
  inline void clear_ispositive();
  static const int kIsPositiveFieldNumber = 4;
  inline bool ispositive() const;
  inline void set_ispositive(bool value);

  // optional uint64 equalPredicate = 5;
  inline bool has_equalpredicate() const;
  inline void clear_equalpredicate();
  static const int kEqualPredicateFieldNumber = 5;
  inline ::google::protobuf::uint64 equalpredicate() const;
  inline void set_equalpredicate(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:deepdive.GraphEdge)
 private:
  inline void set_has_variableid();
  inline void clear_has_variableid();
  inline void set_has_factorid();
  inline void clear_has_factorid();
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_ispositive();
  inline void clear_has_ispositive();
  inline void set_has_equalpredicate();
  inline void clear_has_equalpredicate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 variableid_;
  ::google::protobuf::uint64 factorid_;
  ::google::protobuf::uint64 position_;
  ::google::protobuf::uint64 equalpredicate_;
  bool ispositive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static GraphEdge* default_instance_;
};
// -------------------------------------------------------------------

class FactorGraph : public ::google::protobuf::Message {
 public:
  FactorGraph();
  virtual ~FactorGraph();

  FactorGraph(const FactorGraph& from);

  inline FactorGraph& operator=(const FactorGraph& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FactorGraph& default_instance();

  void Swap(FactorGraph* other);

  // implements Message ----------------------------------------------

  FactorGraph* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FactorGraph& from);
  void MergeFrom(const FactorGraph& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 numWeights = 1;
  inline bool has_numweights() const;
  inline void clear_numweights();
  static const int kNumWeightsFieldNumber = 1;
  inline ::google::protobuf::uint64 numweights() const;
  inline void set_numweights(::google::protobuf::uint64 value);

  // required uint64 numVariables = 2;
  inline bool has_numvariables() const;
  inline void clear_numvariables();
  static const int kNumVariablesFieldNumber = 2;
  inline ::google::protobuf::uint64 numvariables() const;
  inline void set_numvariables(::google::protobuf::uint64 value);

  // required uint64 numFactors = 3;
  inline bool has_numfactors() const;
  inline void clear_numfactors();
  static const int kNumFactorsFieldNumber = 3;
  inline ::google::protobuf::uint64 numfactors() const;
  inline void set_numfactors(::google::protobuf::uint64 value);

  // required uint64 numEdges = 4;
  inline bool has_numedges() const;
  inline void clear_numedges();
  static const int kNumEdgesFieldNumber = 4;
  inline ::google::protobuf::uint64 numedges() const;
  inline void set_numedges(::google::protobuf::uint64 value);

  // required string weightsFile = 5;
  inline bool has_weightsfile() const;
  inline void clear_weightsfile();
  static const int kWeightsFileFieldNumber = 5;
  inline const ::std::string& weightsfile() const;
  inline void set_weightsfile(const ::std::string& value);
  inline void set_weightsfile(const char* value);
  inline void set_weightsfile(const char* value, size_t size);
  inline ::std::string* mutable_weightsfile();
  inline ::std::string* release_weightsfile();
  inline void set_allocated_weightsfile(::std::string* weightsfile);

  // required string variablesFile = 6;
  inline bool has_variablesfile() const;
  inline void clear_variablesfile();
  static const int kVariablesFileFieldNumber = 6;
  inline const ::std::string& variablesfile() const;
  inline void set_variablesfile(const ::std::string& value);
  inline void set_variablesfile(const char* value);
  inline void set_variablesfile(const char* value, size_t size);
  inline ::std::string* mutable_variablesfile();
  inline ::std::string* release_variablesfile();
  inline void set_allocated_variablesfile(::std::string* variablesfile);

  // required string factorsFile = 7;
  inline bool has_factorsfile() const;
  inline void clear_factorsfile();
  static const int kFactorsFileFieldNumber = 7;
  inline const ::std::string& factorsfile() const;
  inline void set_factorsfile(const ::std::string& value);
  inline void set_factorsfile(const char* value);
  inline void set_factorsfile(const char* value, size_t size);
  inline ::std::string* mutable_factorsfile();
  inline ::std::string* release_factorsfile();
  inline void set_allocated_factorsfile(::std::string* factorsfile);

  // required string edgesFile = 8;
  inline bool has_edgesfile() const;
  inline void clear_edgesfile();
  static const int kEdgesFileFieldNumber = 8;
  inline const ::std::string& edgesfile() const;
  inline void set_edgesfile(const ::std::string& value);
  inline void set_edgesfile(const char* value);
  inline void set_edgesfile(const char* value, size_t size);
  inline ::std::string* mutable_edgesfile();
  inline ::std::string* release_edgesfile();
  inline void set_allocated_edgesfile(::std::string* edgesfile);

  // @@protoc_insertion_point(class_scope:deepdive.FactorGraph)
 private:
  inline void set_has_numweights();
  inline void clear_has_numweights();
  inline void set_has_numvariables();
  inline void clear_has_numvariables();
  inline void set_has_numfactors();
  inline void clear_has_numfactors();
  inline void set_has_numedges();
  inline void clear_has_numedges();
  inline void set_has_weightsfile();
  inline void clear_has_weightsfile();
  inline void set_has_variablesfile();
  inline void clear_has_variablesfile();
  inline void set_has_factorsfile();
  inline void clear_has_factorsfile();
  inline void set_has_edgesfile();
  inline void clear_has_edgesfile();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 numweights_;
  ::google::protobuf::uint64 numvariables_;
  ::google::protobuf::uint64 numfactors_;
  ::google::protobuf::uint64 numedges_;
  ::std::string* weightsfile_;
  ::std::string* variablesfile_;
  ::std::string* factorsfile_;
  ::std::string* edgesfile_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static FactorGraph* default_instance_;
};
// -------------------------------------------------------------------

class WeightInferenceResult : public ::google::protobuf::Message {
 public:
  WeightInferenceResult();
  virtual ~WeightInferenceResult();

  WeightInferenceResult(const WeightInferenceResult& from);

  inline WeightInferenceResult& operator=(const WeightInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WeightInferenceResult& default_instance();

  void Swap(WeightInferenceResult* other);

  // implements Message ----------------------------------------------

  WeightInferenceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WeightInferenceResult& from);
  void MergeFrom(const WeightInferenceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // required double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // @@protoc_insertion_point(class_scope:deepdive.WeightInferenceResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  double value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static WeightInferenceResult* default_instance_;
};
// -------------------------------------------------------------------

class VariableInferenceResult : public ::google::protobuf::Message {
 public:
  VariableInferenceResult();
  virtual ~VariableInferenceResult();

  VariableInferenceResult(const VariableInferenceResult& from);

  inline VariableInferenceResult& operator=(const VariableInferenceResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VariableInferenceResult& default_instance();

  void Swap(VariableInferenceResult* other);

  // implements Message ----------------------------------------------

  VariableInferenceResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VariableInferenceResult& from);
  void MergeFrom(const VariableInferenceResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint64 category = 2;
  inline bool has_category() const;
  inline void clear_category();
  static const int kCategoryFieldNumber = 2;
  inline ::google::protobuf::uint64 category() const;
  inline void set_category(::google::protobuf::uint64 value);

  // required double expectation = 3;
  inline bool has_expectation() const;
  inline void clear_expectation();
  static const int kExpectationFieldNumber = 3;
  inline double expectation() const;
  inline void set_expectation(double value);

  // @@protoc_insertion_point(class_scope:deepdive.VariableInferenceResult)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_category();
  inline void clear_has_category();
  inline void set_has_expectation();
  inline void clear_has_expectation();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint64 category_;
  double expectation_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_factor_5fgraph_2eproto();
  friend void protobuf_AssignDesc_factor_5fgraph_2eproto();
  friend void protobuf_ShutdownFile_factor_5fgraph_2eproto();

  void InitAsDefaultInstance();
  static VariableInferenceResult* default_instance_;
};
// ===================================================================


// ===================================================================

// Weight

// required uint64 id = 1;
inline bool Weight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Weight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Weight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Weight::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Weight::id() const {
  return id_;
}
inline void Weight::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional double initialValue = 2 [default = 0];
inline bool Weight::has_initialvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Weight::set_has_initialvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Weight::clear_has_initialvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Weight::clear_initialvalue() {
  initialvalue_ = 0;
  clear_has_initialvalue();
}
inline double Weight::initialvalue() const {
  return initialvalue_;
}
inline void Weight::set_initialvalue(double value) {
  set_has_initialvalue();
  initialvalue_ = value;
}

// required bool isFixed = 3;
inline bool Weight::has_isfixed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Weight::set_has_isfixed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Weight::clear_has_isfixed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Weight::clear_isfixed() {
  isfixed_ = false;
  clear_has_isfixed();
}
inline bool Weight::isfixed() const {
  return isfixed_;
}
inline void Weight::set_isfixed(bool value) {
  set_has_isfixed();
  isfixed_ = value;
}

// optional string description = 4;
inline bool Weight::has_description() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Weight::set_has_description() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Weight::clear_has_description() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Weight::clear_description() {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    description_->clear();
  }
  clear_has_description();
}
inline const ::std::string& Weight::description() const {
  return *description_;
}
inline void Weight::set_description(const ::std::string& value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Weight::set_description(const char* value) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(value);
}
inline void Weight::set_description(const char* value, size_t size) {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  description_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Weight::mutable_description() {
  set_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    description_ = new ::std::string;
  }
  return description_;
}
inline ::std::string* Weight::release_description() {
  clear_has_description();
  if (description_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = description_;
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Weight::set_allocated_description(::std::string* description) {
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (description) {
    set_has_description();
    description_ = description;
  } else {
    clear_has_description();
    description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Variable

// required uint64 id = 1;
inline bool Variable::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Variable::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Variable::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Variable::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Variable::id() const {
  return id_;
}
inline void Variable::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional double initialValue = 2;
inline bool Variable::has_initialvalue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Variable::set_has_initialvalue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Variable::clear_has_initialvalue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Variable::clear_initialvalue() {
  initialvalue_ = 0;
  clear_has_initialvalue();
}
inline double Variable::initialvalue() const {
  return initialvalue_;
}
inline void Variable::set_initialvalue(double value) {
  set_has_initialvalue();
  initialvalue_ = value;
}

// required .deepdive.Variable.VariableDataType dataType = 3;
inline bool Variable::has_datatype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Variable::set_has_datatype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Variable::clear_has_datatype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Variable::clear_datatype() {
  datatype_ = 0;
  clear_has_datatype();
}
inline ::deepdive::Variable_VariableDataType Variable::datatype() const {
  return static_cast< ::deepdive::Variable_VariableDataType >(datatype_);
}
inline void Variable::set_datatype(::deepdive::Variable_VariableDataType value) {
  assert(::deepdive::Variable_VariableDataType_IsValid(value));
  set_has_datatype();
  datatype_ = value;
}

// optional bool isEvidence = 4;
inline bool Variable::has_isevidence() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Variable::set_has_isevidence() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Variable::clear_has_isevidence() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Variable::clear_isevidence() {
  isevidence_ = false;
  clear_has_isevidence();
}
inline bool Variable::isevidence() const {
  return isevidence_;
}
inline void Variable::set_isevidence(bool value) {
  set_has_isevidence();
  isevidence_ = value;
}

// optional uint64 cardinality = 5;
inline bool Variable::has_cardinality() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Variable::set_has_cardinality() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Variable::clear_has_cardinality() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Variable::clear_cardinality() {
  cardinality_ = GOOGLE_ULONGLONG(0);
  clear_has_cardinality();
}
inline ::google::protobuf::uint64 Variable::cardinality() const {
  return cardinality_;
}
inline void Variable::set_cardinality(::google::protobuf::uint64 value) {
  set_has_cardinality();
  cardinality_ = value;
}

// optional uint64 edgeCount = 6;
inline bool Variable::has_edgecount() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Variable::set_has_edgecount() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Variable::clear_has_edgecount() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Variable::clear_edgecount() {
  edgecount_ = GOOGLE_ULONGLONG(0);
  clear_has_edgecount();
}
inline ::google::protobuf::uint64 Variable::edgecount() const {
  return edgecount_;
}
inline void Variable::set_edgecount(::google::protobuf::uint64 value) {
  set_has_edgecount();
  edgecount_ = value;
}

// -------------------------------------------------------------------

// Factor

// required uint64 id = 1;
inline bool Factor::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Factor::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Factor::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Factor::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 Factor::id() const {
  return id_;
}
inline void Factor::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required uint64 weightId = 2;
inline bool Factor::has_weightid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Factor::set_has_weightid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Factor::clear_has_weightid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Factor::clear_weightid() {
  weightid_ = GOOGLE_ULONGLONG(0);
  clear_has_weightid();
}
inline ::google::protobuf::uint64 Factor::weightid() const {
  return weightid_;
}
inline void Factor::set_weightid(::google::protobuf::uint64 value) {
  set_has_weightid();
  weightid_ = value;
}

// required .deepdive.Factor.FactorFunctionType factorFunction = 3;
inline bool Factor::has_factorfunction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Factor::set_has_factorfunction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Factor::clear_has_factorfunction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Factor::clear_factorfunction() {
  factorfunction_ = 0;
  clear_has_factorfunction();
}
inline ::deepdive::Factor_FactorFunctionType Factor::factorfunction() const {
  return static_cast< ::deepdive::Factor_FactorFunctionType >(factorfunction_);
}
inline void Factor::set_factorfunction(::deepdive::Factor_FactorFunctionType value) {
  assert(::deepdive::Factor_FactorFunctionType_IsValid(value));
  set_has_factorfunction();
  factorfunction_ = value;
}

// optional uint64 edgeCount = 4;
inline bool Factor::has_edgecount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Factor::set_has_edgecount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Factor::clear_has_edgecount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Factor::clear_edgecount() {
  edgecount_ = GOOGLE_ULONGLONG(0);
  clear_has_edgecount();
}
inline ::google::protobuf::uint64 Factor::edgecount() const {
  return edgecount_;
}
inline void Factor::set_edgecount(::google::protobuf::uint64 value) {
  set_has_edgecount();
  edgecount_ = value;
}

// -------------------------------------------------------------------

// GraphEdge

// required uint64 variableId = 1;
inline bool GraphEdge::has_variableid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphEdge::set_has_variableid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphEdge::clear_has_variableid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphEdge::clear_variableid() {
  variableid_ = GOOGLE_ULONGLONG(0);
  clear_has_variableid();
}
inline ::google::protobuf::uint64 GraphEdge::variableid() const {
  return variableid_;
}
inline void GraphEdge::set_variableid(::google::protobuf::uint64 value) {
  set_has_variableid();
  variableid_ = value;
}

// required uint64 factorId = 2;
inline bool GraphEdge::has_factorid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraphEdge::set_has_factorid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraphEdge::clear_has_factorid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraphEdge::clear_factorid() {
  factorid_ = GOOGLE_ULONGLONG(0);
  clear_has_factorid();
}
inline ::google::protobuf::uint64 GraphEdge::factorid() const {
  return factorid_;
}
inline void GraphEdge::set_factorid(::google::protobuf::uint64 value) {
  set_has_factorid();
  factorid_ = value;
}

// required uint64 position = 3;
inline bool GraphEdge::has_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GraphEdge::set_has_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GraphEdge::clear_has_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GraphEdge::clear_position() {
  position_ = GOOGLE_ULONGLONG(0);
  clear_has_position();
}
inline ::google::protobuf::uint64 GraphEdge::position() const {
  return position_;
}
inline void GraphEdge::set_position(::google::protobuf::uint64 value) {
  set_has_position();
  position_ = value;
}

// optional bool isPositive = 4 [default = true];
inline bool GraphEdge::has_ispositive() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GraphEdge::set_has_ispositive() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GraphEdge::clear_has_ispositive() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GraphEdge::clear_ispositive() {
  ispositive_ = true;
  clear_has_ispositive();
}
inline bool GraphEdge::ispositive() const {
  return ispositive_;
}
inline void GraphEdge::set_ispositive(bool value) {
  set_has_ispositive();
  ispositive_ = value;
}

// optional uint64 equalPredicate = 5;
inline bool GraphEdge::has_equalpredicate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GraphEdge::set_has_equalpredicate() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GraphEdge::clear_has_equalpredicate() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GraphEdge::clear_equalpredicate() {
  equalpredicate_ = GOOGLE_ULONGLONG(0);
  clear_has_equalpredicate();
}
inline ::google::protobuf::uint64 GraphEdge::equalpredicate() const {
  return equalpredicate_;
}
inline void GraphEdge::set_equalpredicate(::google::protobuf::uint64 value) {
  set_has_equalpredicate();
  equalpredicate_ = value;
}

// -------------------------------------------------------------------

// FactorGraph

// required uint64 numWeights = 1;
inline bool FactorGraph::has_numweights() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FactorGraph::set_has_numweights() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FactorGraph::clear_has_numweights() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FactorGraph::clear_numweights() {
  numweights_ = GOOGLE_ULONGLONG(0);
  clear_has_numweights();
}
inline ::google::protobuf::uint64 FactorGraph::numweights() const {
  return numweights_;
}
inline void FactorGraph::set_numweights(::google::protobuf::uint64 value) {
  set_has_numweights();
  numweights_ = value;
}

// required uint64 numVariables = 2;
inline bool FactorGraph::has_numvariables() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FactorGraph::set_has_numvariables() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FactorGraph::clear_has_numvariables() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FactorGraph::clear_numvariables() {
  numvariables_ = GOOGLE_ULONGLONG(0);
  clear_has_numvariables();
}
inline ::google::protobuf::uint64 FactorGraph::numvariables() const {
  return numvariables_;
}
inline void FactorGraph::set_numvariables(::google::protobuf::uint64 value) {
  set_has_numvariables();
  numvariables_ = value;
}

// required uint64 numFactors = 3;
inline bool FactorGraph::has_numfactors() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FactorGraph::set_has_numfactors() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FactorGraph::clear_has_numfactors() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FactorGraph::clear_numfactors() {
  numfactors_ = GOOGLE_ULONGLONG(0);
  clear_has_numfactors();
}
inline ::google::protobuf::uint64 FactorGraph::numfactors() const {
  return numfactors_;
}
inline void FactorGraph::set_numfactors(::google::protobuf::uint64 value) {
  set_has_numfactors();
  numfactors_ = value;
}

// required uint64 numEdges = 4;
inline bool FactorGraph::has_numedges() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FactorGraph::set_has_numedges() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FactorGraph::clear_has_numedges() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FactorGraph::clear_numedges() {
  numedges_ = GOOGLE_ULONGLONG(0);
  clear_has_numedges();
}
inline ::google::protobuf::uint64 FactorGraph::numedges() const {
  return numedges_;
}
inline void FactorGraph::set_numedges(::google::protobuf::uint64 value) {
  set_has_numedges();
  numedges_ = value;
}

// required string weightsFile = 5;
inline bool FactorGraph::has_weightsfile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FactorGraph::set_has_weightsfile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FactorGraph::clear_has_weightsfile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FactorGraph::clear_weightsfile() {
  if (weightsfile_ != &::google::protobuf::internal::kEmptyString) {
    weightsfile_->clear();
  }
  clear_has_weightsfile();
}
inline const ::std::string& FactorGraph::weightsfile() const {
  return *weightsfile_;
}
inline void FactorGraph::set_weightsfile(const ::std::string& value) {
  set_has_weightsfile();
  if (weightsfile_ == &::google::protobuf::internal::kEmptyString) {
    weightsfile_ = new ::std::string;
  }
  weightsfile_->assign(value);
}
inline void FactorGraph::set_weightsfile(const char* value) {
  set_has_weightsfile();
  if (weightsfile_ == &::google::protobuf::internal::kEmptyString) {
    weightsfile_ = new ::std::string;
  }
  weightsfile_->assign(value);
}
inline void FactorGraph::set_weightsfile(const char* value, size_t size) {
  set_has_weightsfile();
  if (weightsfile_ == &::google::protobuf::internal::kEmptyString) {
    weightsfile_ = new ::std::string;
  }
  weightsfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactorGraph::mutable_weightsfile() {
  set_has_weightsfile();
  if (weightsfile_ == &::google::protobuf::internal::kEmptyString) {
    weightsfile_ = new ::std::string;
  }
  return weightsfile_;
}
inline ::std::string* FactorGraph::release_weightsfile() {
  clear_has_weightsfile();
  if (weightsfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = weightsfile_;
    weightsfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactorGraph::set_allocated_weightsfile(::std::string* weightsfile) {
  if (weightsfile_ != &::google::protobuf::internal::kEmptyString) {
    delete weightsfile_;
  }
  if (weightsfile) {
    set_has_weightsfile();
    weightsfile_ = weightsfile;
  } else {
    clear_has_weightsfile();
    weightsfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string variablesFile = 6;
inline bool FactorGraph::has_variablesfile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FactorGraph::set_has_variablesfile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FactorGraph::clear_has_variablesfile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FactorGraph::clear_variablesfile() {
  if (variablesfile_ != &::google::protobuf::internal::kEmptyString) {
    variablesfile_->clear();
  }
  clear_has_variablesfile();
}
inline const ::std::string& FactorGraph::variablesfile() const {
  return *variablesfile_;
}
inline void FactorGraph::set_variablesfile(const ::std::string& value) {
  set_has_variablesfile();
  if (variablesfile_ == &::google::protobuf::internal::kEmptyString) {
    variablesfile_ = new ::std::string;
  }
  variablesfile_->assign(value);
}
inline void FactorGraph::set_variablesfile(const char* value) {
  set_has_variablesfile();
  if (variablesfile_ == &::google::protobuf::internal::kEmptyString) {
    variablesfile_ = new ::std::string;
  }
  variablesfile_->assign(value);
}
inline void FactorGraph::set_variablesfile(const char* value, size_t size) {
  set_has_variablesfile();
  if (variablesfile_ == &::google::protobuf::internal::kEmptyString) {
    variablesfile_ = new ::std::string;
  }
  variablesfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactorGraph::mutable_variablesfile() {
  set_has_variablesfile();
  if (variablesfile_ == &::google::protobuf::internal::kEmptyString) {
    variablesfile_ = new ::std::string;
  }
  return variablesfile_;
}
inline ::std::string* FactorGraph::release_variablesfile() {
  clear_has_variablesfile();
  if (variablesfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = variablesfile_;
    variablesfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactorGraph::set_allocated_variablesfile(::std::string* variablesfile) {
  if (variablesfile_ != &::google::protobuf::internal::kEmptyString) {
    delete variablesfile_;
  }
  if (variablesfile) {
    set_has_variablesfile();
    variablesfile_ = variablesfile;
  } else {
    clear_has_variablesfile();
    variablesfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string factorsFile = 7;
inline bool FactorGraph::has_factorsfile() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FactorGraph::set_has_factorsfile() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FactorGraph::clear_has_factorsfile() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FactorGraph::clear_factorsfile() {
  if (factorsfile_ != &::google::protobuf::internal::kEmptyString) {
    factorsfile_->clear();
  }
  clear_has_factorsfile();
}
inline const ::std::string& FactorGraph::factorsfile() const {
  return *factorsfile_;
}
inline void FactorGraph::set_factorsfile(const ::std::string& value) {
  set_has_factorsfile();
  if (factorsfile_ == &::google::protobuf::internal::kEmptyString) {
    factorsfile_ = new ::std::string;
  }
  factorsfile_->assign(value);
}
inline void FactorGraph::set_factorsfile(const char* value) {
  set_has_factorsfile();
  if (factorsfile_ == &::google::protobuf::internal::kEmptyString) {
    factorsfile_ = new ::std::string;
  }
  factorsfile_->assign(value);
}
inline void FactorGraph::set_factorsfile(const char* value, size_t size) {
  set_has_factorsfile();
  if (factorsfile_ == &::google::protobuf::internal::kEmptyString) {
    factorsfile_ = new ::std::string;
  }
  factorsfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactorGraph::mutable_factorsfile() {
  set_has_factorsfile();
  if (factorsfile_ == &::google::protobuf::internal::kEmptyString) {
    factorsfile_ = new ::std::string;
  }
  return factorsfile_;
}
inline ::std::string* FactorGraph::release_factorsfile() {
  clear_has_factorsfile();
  if (factorsfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = factorsfile_;
    factorsfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactorGraph::set_allocated_factorsfile(::std::string* factorsfile) {
  if (factorsfile_ != &::google::protobuf::internal::kEmptyString) {
    delete factorsfile_;
  }
  if (factorsfile) {
    set_has_factorsfile();
    factorsfile_ = factorsfile;
  } else {
    clear_has_factorsfile();
    factorsfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string edgesFile = 8;
inline bool FactorGraph::has_edgesfile() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FactorGraph::set_has_edgesfile() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FactorGraph::clear_has_edgesfile() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FactorGraph::clear_edgesfile() {
  if (edgesfile_ != &::google::protobuf::internal::kEmptyString) {
    edgesfile_->clear();
  }
  clear_has_edgesfile();
}
inline const ::std::string& FactorGraph::edgesfile() const {
  return *edgesfile_;
}
inline void FactorGraph::set_edgesfile(const ::std::string& value) {
  set_has_edgesfile();
  if (edgesfile_ == &::google::protobuf::internal::kEmptyString) {
    edgesfile_ = new ::std::string;
  }
  edgesfile_->assign(value);
}
inline void FactorGraph::set_edgesfile(const char* value) {
  set_has_edgesfile();
  if (edgesfile_ == &::google::protobuf::internal::kEmptyString) {
    edgesfile_ = new ::std::string;
  }
  edgesfile_->assign(value);
}
inline void FactorGraph::set_edgesfile(const char* value, size_t size) {
  set_has_edgesfile();
  if (edgesfile_ == &::google::protobuf::internal::kEmptyString) {
    edgesfile_ = new ::std::string;
  }
  edgesfile_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FactorGraph::mutable_edgesfile() {
  set_has_edgesfile();
  if (edgesfile_ == &::google::protobuf::internal::kEmptyString) {
    edgesfile_ = new ::std::string;
  }
  return edgesfile_;
}
inline ::std::string* FactorGraph::release_edgesfile() {
  clear_has_edgesfile();
  if (edgesfile_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = edgesfile_;
    edgesfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FactorGraph::set_allocated_edgesfile(::std::string* edgesfile) {
  if (edgesfile_ != &::google::protobuf::internal::kEmptyString) {
    delete edgesfile_;
  }
  if (edgesfile) {
    set_has_edgesfile();
    edgesfile_ = edgesfile;
  } else {
    clear_has_edgesfile();
    edgesfile_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WeightInferenceResult

// required uint64 id = 1;
inline bool WeightInferenceResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WeightInferenceResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WeightInferenceResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WeightInferenceResult::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 WeightInferenceResult::id() const {
  return id_;
}
inline void WeightInferenceResult::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// required double value = 2;
inline bool WeightInferenceResult::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WeightInferenceResult::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WeightInferenceResult::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WeightInferenceResult::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double WeightInferenceResult::value() const {
  return value_;
}
inline void WeightInferenceResult::set_value(double value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// VariableInferenceResult

// required uint64 id = 1;
inline bool VariableInferenceResult::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VariableInferenceResult::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VariableInferenceResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VariableInferenceResult::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 VariableInferenceResult::id() const {
  return id_;
}
inline void VariableInferenceResult::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint64 category = 2;
inline bool VariableInferenceResult::has_category() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VariableInferenceResult::set_has_category() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VariableInferenceResult::clear_has_category() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VariableInferenceResult::clear_category() {
  category_ = GOOGLE_ULONGLONG(0);
  clear_has_category();
}
inline ::google::protobuf::uint64 VariableInferenceResult::category() const {
  return category_;
}
inline void VariableInferenceResult::set_category(::google::protobuf::uint64 value) {
  set_has_category();
  category_ = value;
}

// required double expectation = 3;
inline bool VariableInferenceResult::has_expectation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VariableInferenceResult::set_has_expectation() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VariableInferenceResult::clear_has_expectation() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VariableInferenceResult::clear_expectation() {
  expectation_ = 0;
  clear_has_expectation();
}
inline double VariableInferenceResult::expectation() const {
  return expectation_;
}
inline void VariableInferenceResult::set_expectation(double value) {
  set_has_expectation();
  expectation_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace deepdive

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::deepdive::Variable_VariableDataType>() {
  return ::deepdive::Variable_VariableDataType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::deepdive::Factor_FactorFunctionType>() {
  return ::deepdive::Factor_FactorFunctionType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_factor_5fgraph_2eproto__INCLUDED
